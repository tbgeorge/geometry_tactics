//=================================================================================
// Feature.cpp
// Author: Tyler George
// Date  : October 4, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "GameCode/Entities/Feature.hpp"
#include "Engine/Utilities/XMLHelper.hpp"
#include "Engine/Utilities/StringTable.hpp"
#include "GameCode/Map.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Feature::Feature( OpenGLRenderer* renderer, Clock* parentClock, const XMLNode& featureNode )
    : Entity( renderer, featureNode, parentClock )
    , m_type( FT_INVALID )
    , m_blocksMovement( true )
    , m_blocksLOS( true )
    , m_height( 0.0f )
{
    unsigned int featureTypeStrID = StringTable::GetStringID( GetStringProperty( featureNode, "type", "", true ) );

    if (featureTypeStrID == StringTable::GetStringID( "tree" ))
    {
        m_type = FT_TREE;

        m_blocksMovement = true;
        m_blocksLOS = true;
    }

    else if (featureTypeStrID == StringTable::GetStringID( "small rock" ))
    {
        m_type = FT_SMALL_ROCK;

        m_blocksMovement = false;
        m_blocksLOS = false;
    }

    else if (featureTypeStrID == StringTable::GetStringID( "large rock" ))
    {
        m_type = FT_LARGE_ROCK;
        
        m_blocksMovement = true;
        m_blocksLOS = true;
    }

    else
    {
        m_type = FT_INVALID;
    }

    for each (Vertex3D_PUC vert in m_verts)
    {
        Vector3& pos = vert.position;
        if ( pos.y > m_height )
            m_height = pos.y;
    }
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Feature::Feature( const Feature& copy, OpenGLRenderer* renderer, Clock* parentClock, const XMLNode& featureNode )
    : Entity( copy, renderer, featureNode, parentClock )
    , m_type( copy.m_type )
    , m_blocksLOS( copy.m_blocksLOS )
    , m_blocksMovement( copy.m_blocksMovement )
    , m_height( copy.m_height )
{
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Feature::~Feature()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
std::string Feature::GetTypeAsString( FeatureType type )
{
    switch (type)
    {
    case FT_TREE:
        return "tree";
    case FT_SMALL_ROCK:
        return "small rock";
    case FT_LARGE_ROCK:
        return "large rock";
    default:
        return "";
    }
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void Feature::Render( const bool& debugModeEnabled )
{
    if (!m_renderer)
        return;

    Matrix4f modelTransform = Matrix4f::CreateTranslation( Vector3( m_renderPosition.x, m_renderPosition.y, m_renderPosition.z ) );

    m_mesh->SetDrawInstructions( DrawInstructions( GL_TRIANGLES, m_verts.size(), m_indicies.size(), true ) );
    m_meshRenderer->Render( modelTransform, m_renderer->GetViewMatrix(), m_renderer->GetPerspectiveMatrix() );


}

////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

